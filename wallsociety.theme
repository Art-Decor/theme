<?php

/**
 * @file
 * Functions to support theming.
 */

/**
 * Implements hook_preprocess_image_widget().
 */
function wallsociety_preprocess_image_widget(array &$variables)
{
  $data = &$variables['data'];

  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

function wallsociety_theme_suggestions_image_alter(array &$suggestions, array $variables)
{
  if (isset($variables['style_name']) && !is_null($variables['style_name'])) {
    $suggestion = 'image__' . $variables['style_name'];
    $suggestion = str_replace('-', '_', $suggestion);
    $suggestions[] = $suggestion;
  }
}

/**
 * Implements hook_preprocess_views_view().
 *
 * Moves the commerce_cart_form footer output above the submit buttons.
 */
function wallsociety_preprocess_views_view(&$variables)
{
  $view = $variables['view'];
  if (strpos($view->storage->get('tag'), 'commerce_cart_form') !== FALSE) {

    $variables['rows']['footer']['area_text_custom_1']['#prefix'] = '<div class="order-2 w-full md:w-[calc(100%_-_500px)] p-5 font-medium text-primary-100 [&_a:hover]:!text-brown-100 text-sm [&_a]:transition [&_a]:duration-200">';
    $variables['rows']['footer']['area_text_custom_1']['#suffix'] = '</div>';

    $variables['rows']['footer']['area_text_custom']['#prefix'] = '<div class="order-3 w-full md:w-[500px] bg-[#F5F4F5] text-2xl md:text-3xl p-5 text-primary-100 font-medium">';
    $variables['rows']['footer']['area_text_custom']['#suffix'] = '</div>';

    $variables['rows']['footer']['commerce_order_total']['#prefix'] = '<div class="order-4 !text-lg !font-light inline-block w-full md:w-[500px] !px-5 md:ml-[calc(100%_-_500px)] !mb-0 bg-[#F5F4F5]">';
    $variables['rows']['footer']['commerce_order_total']['#suffix'] = '</div>';
  }
}

function wallsociety_preprocess_views_view_grid(&$variables)
{
  $view = $variables['view'];

  if (strpos($view->storage->get('id'), 'inspirations_gallery') !== FALSE) {

    $index = 0;
    $itemsFullsize = [];
    foreach ($variables['items'] as $row) {
      foreach ($row['content'] as $item) {
        $itemsFullsize[$index] = $item;
        if (isset($item['content']['#image_style'])) {
          $itemsFullsize[$index]['content']['#image_style'] = '';
        }
        $index++;
      }
    }
    $variables['itemsFullsize'] = $itemsFullsize;

    attachSwiperLinksToHtmlHead($variables);
  }
}

/**
 * Add class to cart form
 */
function wallsociety_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id)
{
  $attached_library = $form['#attached']['library'] ?? NULL;
  if ($attached_library && reset($attached_library) == 'commerce_cart/cart_form') {
    $form['#attributes']['class'] = ['flex', 'flex-wrap', 'justify-end'];
  }
}

/**
 * Creates image items copy with fullsize style,
 * Adds the swiper links to the HTML head section
 */

function wallsociety_preprocess_field(&$variables)
{
  $field_name = $variables['element']['#field_name'];

  if ($field_name == 'field_gallery') {
    $itemsFullsize = $variables['items'];
    foreach ($itemsFullsize as $delta => $item) {
      if (isset($item['content']['#image_style'])) {
        $itemsFullsize[$delta]['content']['#image_style'] = '';
      }
    }
    $variables['itemsFullsize'] = $itemsFullsize;

    attachSwiperLinksToHtmlHead($variables);
  }
}

function attachSwiperLinksToHtmlHead(&$variables)
{
  $styles_url = '//unpkg.com/swiper@8/swiper-bundle.min.css';
  $script_url = '//unpkg.com/swiper@8/swiper-bundle.min.js';
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'link',
      '#attributes' => [
        'rel' => 'stylesheet',
        'href' => $styles_url,
      ],
    ],
    'wallsociety_swiper_styles',
  ];
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#attributes' => [
        'src' => $script_url,
      ],
    ],
    'wallsociety_swiper_script',
  ];
}
/**
 * Implements wallsociety__theme_suggestions_HOOK_alter().
 */
function wallsociety_theme_suggestions_item_list_alter(&$suggestions, $variables, $hook)
{
  if (isset($variables['attributes']['class']) && isset($variables['attributes']['class'][0])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-', '_', $variables['attributes']['class'][0]);
  }
}


function wallsociety_theme_suggestions_fieldset_alter(array &$suggestions, array $variables, $hook)
{
  if (isset($variables['element']) && isset($variables['element']['#type'])) {
    $suggestions[] = $variables['element']['#type'];
  }

  if ($rawParameters = \Drupal::routeMatch()->getRawParameters('commerce_product')) {
    foreach ($rawParameters as $paramName => $paramVal) {
      if ($paramName === 'commerce_product') {
        $suggestions[] = 'page_type__' . $paramName;

        if (isset($variables['element']) && isset($variables['element']['#type'])) {
          $suggestions[] = 'page_type__' . $paramName . '__field_type__' . $variables['element']['#type'];
        }
      }
    }
  }
}

function wallsociety_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'simplenews_subscriptions_block_footer') {
    $form['mail']['widget'][0]['value']['#placeholder'] = t('Email address');
    $form['mail']['widget'][0]['value']['#title'] = null;
  }
  if (str_contains($form_id, 'commerce_order_item_add_to_cart_form_commerce_product')) {
    $form['actions']['submit']['#attributes']['disabled']  = 'disabled';
  }
}


/**
 * @param $suggestions
 * @param array $variables
 */
function wallsociety_theme_suggestions_select_alter(&$suggestions, array $variables)
{
  $element = $variables['element'];
  $id_item = str_replace('-', '_', $element['#id']);
  $suggestions[] = 'select__' . $id_item;

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $node = str_replace('-', '_', $node->bundle());
    $suggestions[] = 'select__' . $id_item . '__page__' . $node;
  }
}

function wallsociety_preprocess_item_list(&$variables)
{
  $variables['wrapper_attributes'] = new Attribute($variables['wrapper_attributes']);
  foreach ($variables['items'] as &$item) {
    $attributes = [];

    // If the item value is an array, then it is a render array.
    if (is_array($item)) {

      // List items support attributes via the '#wrapper_attributes' property.
      if (isset($item['#wrapper_attributes'])) {
        $attributes = $item['#wrapper_attributes'];
      }

      dpm($attributes);
      dpm($item);
      // Determine whether there are any child elements in the item that are not
      // fully-specified render arrays. If there are any, then the child
      // elements present nested lists and we automatically inherit the render
      // array properties of the current list to them.
      foreach (Element::children($item) as $key) {
        $child = &$item[$key];

        // If this child element does not specify how it can be rendered, then
        // we need to inherit the render properties of the current list.
        if (!isset($child['#type']) && !isset($child['#theme']) && !isset($child['#markup'])) {

          // Since item-list.html.twig supports both strings and render arrays
          // as items, the items of the nested list may have been specified as
          // the child elements of the nested list, instead of #items. For
          // convenience, we automatically move them into #items.
          if (!isset($child['#items'])) {

            // This is the same condition as in
            // \Drupal\Core\Render\Element::children(), which cannot be used
            // here, since it triggers an error on string values.
            foreach ($child as $child_key => $child_value) {
              if (is_int($child_key) || $child_key === '' || $child_key[0] !== '#') {
                $child['#items'][$child_key] = $child_value;
                unset($child[$child_key]);
              }
            }
          }

          // Lastly, inherit the original theme variables of the current list.
          $child['#theme'] = $variables['theme_hook_original'];
          $child['#list_type'] = $variables['list_type'];
        }
      }
    }

    // Set the item's value and attributes for the template.
    $item = [
      'value' => $item,
      'attributes' => new Attribute($attributes),
    ];
  }
}
